# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
- repo: self



variables:
  BuildConfiguration: 'Release'
  System.Debug: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

trigger:
  batch: 'true'
  branches:
    include:
      - master
      - refs/tags/*
pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*
pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 2.2.300'
    inputs:
      version: 2.2.300
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: build
      projects: 'src/ZendeskAPI.sln'
      arguments: '-c $(BuildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: 'src/Speedygeek.ZendeskAPI.UnitTests/Speedygeek.ZendeskAPI.UnitTests.csproj'
      arguments: '--no-build -c $(BuildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: pack
      searchPatternPack: 'src/Speedygeek.ZendeskAPI/Speedygeek.ZendeskAPI.csproj'
      nobuild: true

# - task: PowerShell@2
#   inputs:
#     filePath: .\ci\sign-package.ps1
#   env:
#     SignClientUser: $(speedygeek.signClientUser)
#     SignClientSecret: $(speedygeek.signClientSecret)
#   displayName: 'Authenticode sign packages'
#   condition: and(succeeded(), ne(variables['speedygeek.signClientUser'], ''), ne(variables['speedygeek.signClientSecret'], ''))

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifact: Nuget_Package'
#   inputs:
#     ArtifactName: 'Nuget_Package'
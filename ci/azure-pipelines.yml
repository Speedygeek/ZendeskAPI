# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
- repo: self

variables:
  BuildConfiguration: 'Release'
  System.Debug: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  disable.coverage.autogenerate: 'true'

trigger:
  batch: 'true'
  branches:
    include:
      - master
      - refs/tags/*
pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*

jobs:
- job: build_test
  displayName: "Build and Test"
  pool:
    vmImage: 'windows-latest'
  variables:
    BuildConfiguration: 'Release'
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    disable.coverage.autogenerate: 'true'
  steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core Current SDK'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: UseDotNet@2
      displayName: Install .NET Core 2.1.14
      inputs:
        packageType: 'runtime'
        version: '2.1.14'
        
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: 'src/ZendeskAPI.sln'
        arguments: '-c $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: 'src/Speedygeek.ZendeskAPI.UnitTests/Speedygeek.ZendeskAPI.UnitTests.csproj'
        arguments: '--no-build -c $(BuildConfiguration)  /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura%2copencover /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/ /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute"'

    - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
      displayName: ReportGenerator
      inputs:
        reports: '$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/TestResults/Coverage/html'
        reporttypes: 'HtmlInline_AzurePipelines_Dark;Cobertura'

    - task: PublishCodeCoverageResults@1
      displayName: 'publish report'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/TestResults/Coverage/html'

    - task: PowerShell@2
      displayName: 'Upload coverage to codecov.io'
      inputs:
        targetType: inline
        script: |
          $ver = (gci "$env:userprofile\.nuget\packages\codecov").Name
          $cmd = "$env:userprofile\.nuget\packages\codecov\$ver\tools\codecov.exe";
          $fName = "$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml";
          $arg1 = "-f ""$fName""";
          $arg2 = "-t $(CODECOV_TOKEN)";
          & $cmd $arg1 $arg2

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        searchPatternPack: 'src/Speedygeek.ZendeskAPI/Speedygeek.ZendeskAPI.csproj'
        nobuild: true

  # - task: PowerShell@2
  #   inputs:
  #     filePath: .\ci\sign-package.ps1
  #   env:
  #     SignClientUser: $(speedygeek.signClientUser)
  #     SignClientSecret: $(speedygeek.signClientSecret)
  #   displayName: 'Authenticode sign packages'
  #   condition: and(succeeded(), ne(variables['speedygeek.signClientUser'], ''), ne(variables['speedygeek.signClientSecret'], ''))

  # - task: PublishBuildArtifacts@1
  #   displayName: 'Publish Artifact: Nuget_Package'
  #   inputs:
  #     ArtifactName: 'Nuget_Package'